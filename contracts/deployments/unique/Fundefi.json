{
  "address": "0x723D816264b28c170A38E8Bce2259842C30A9377",
  "abi": [
    {
      "inputs": [],
      "name": "_bid_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_bid_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bidder",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bidder_userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_donation_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donations",
      "outputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_event_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_event_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "event_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "event_wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feed_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_feeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feed_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Type",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_joined_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_joined_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "joined_date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nft_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_nft_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sender_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "highest_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "highest_bidder_userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "highest_bidder",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feed_text",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_type",
          "type": "string"
        }
      ],
      "name": "add_Feed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_event_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bidder",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bidder_userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "bid_nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_event_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_event_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_event",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "event_id_no",
          "type": "uint256"
        }
      ],
      "name": "distribute_nft_to_highest_bidder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sender_wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "highest_bidder",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "donate_nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        }
      ],
      "name": "get_event_nft_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "event_id",
          "type": "string"
        }
      ],
      "name": "get_event_reached",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_event_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_joined_date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "join_event",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3a943cfe1114721d09ae3f5012c6ae1972c493332c87bd852bad27846854617",
  "receipt": {
    "to": null,
    "from": "0x610Cd980BeF747451152e8F0fF16A19A451F7a43",
    "contractAddress": "0x723D816264b28c170A38E8Bce2259842C30A9377",
    "transactionIndex": 0,
    "gasUsed": "2946617",
    "logsBloom": "0x
    "blockHash": "0x5c2a978a0fc936e7ef9f630281a27bc650aecedb8dd81d4ba651f6d41bc6548c",
    "transactionHash": "0xf3a943cfe1114721d09ae3f5012c6ae1972c493332c87bd852bad27846854617",
    "logs": [],
    "blockNumber": 3932784,
    "cumulativeGasUsed": "2946617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "f49ebd952821fd76520fdd894dd874e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_bid_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bid_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bidder\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bidder_userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_donation_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_event_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_event_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"event_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"event_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feed_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_feeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feed_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_joined_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_joined_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"joined_date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_nft_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highest_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest_bidder_userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"highest_bidder\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feed_text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"add_Feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_event_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bidder\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bidder_userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"bid_nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_event_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_event_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_event\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"event_id_no\",\"type\":\"uint256\"}],\"name\":\"distribute_nft_to_highest_bidder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"highest_bidder\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"donate_nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"}],\"name\":\"get_event_nft_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"event_id\",\"type\":\"string\"}],\"name\":\"get_event_reached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_event_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_joined_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"join_event\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundefi.sol\":\"Fundefi\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Fundefi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\n\\r\\ncontract Fundefi {\\r\\n  struct event_uri_struct {\\r\\n    uint256 user_id;\\r\\n    string event_uri;\\r\\n    address event_wallet;\\r\\n    string status;\\r\\n  }\\r\\n  struct nft_uri_struct {\\r\\n    string event_id;\\r\\n    string name;\\r\\n    string date;\\r\\n    string url;\\r\\n    string description;\\r\\n    address sender_wallet;\\r\\n    uint256 highest_amount;\\r\\n    uint256 highest_bidder_userid;\\r\\n    string highest_bidder;\\r\\n  }\\r\\n  struct bid_uri_struct {\\r\\n    uint256 nft_id;\\r\\n    string date;\\r\\n    address walletAddress;\\r\\n    string bidder;\\r\\n    uint256 bidder_userid;\\r\\n    uint256 bidAmount;\\r\\n  }\\r\\n\\r\\n  struct donation_struct {\\r\\n    string event_id;\\r\\n    uint256 amount;\\r\\n  }\\r\\n  struct joined_struct {\\r\\n    string event_id;\\r\\n    uint256 user_id;\\r\\n    string joined_date;\\r\\n  }\\r\\n  struct feed_struct {\\r\\n    uint256 feed_id;\\r\\n    uint256 date;\\r\\n    string Type;\\r\\n    string data;\\r\\n  }\\r\\n\\r\\n  uint256 public _event_ids;\\r\\n  uint256 public _joined_ids;\\r\\n  uint256 public _donation_ids;\\r\\n  uint256 public _nft_ids;\\r\\n  uint256 public _bid_ids;\\r\\n  uint256 public _feed_ids;\\r\\n\\r\\n  mapping(uint256 => event_uri_struct) public _event_uris; //_event_ids                  => (Event)                    event uri struct\\r\\n  mapping(uint256 => joined_struct) public _joined_uris; //_joined_ids                  => (Event)                    joined uri struct\\r\\n  mapping(uint256 => donation_struct) public _donations; //_donation_ids                  => (Event)                    donation uri struct\\r\\n  mapping(uint256 => nft_uri_struct) public _nft_uris; //_nft_ids                  => (NFT)                    nft uri struct\\r\\n  mapping(uint256 => bid_uri_struct) public _bid_uris; //_bid_ids                  => (NFT)                    bid uri struct\\r\\n  mapping(uint256 => feed_struct) public _feeds; //_feed_ids            => (feed_struct)\\r\\n\\r\\n  //Events\\r\\n  function create_event(string memory _event_uri, address _event_wallet, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n    //Create Event into _event_uris\\r\\n    _event_uris[_event_ids] = event_uri_struct(_user_id, _event_uri, _event_wallet,'0');\\r\\n\\r\\n    _event_ids++;\\r\\n\\r\\n    add_Feed(_feed, 'event');\\r\\n    return _event_ids;\\r\\n  }\\r\\n\\r\\n  function donate_nft(string memory event_id, string memory name, string memory url, string memory description, address sender_wallet, string memory date, uint256 amount, uint256 userid, string memory highest_bidder, string memory _feed) public returns (uint256) {\\r\\n    //Create Event into _event_uris\\r\\n    _nft_uris[_nft_ids] = nft_uri_struct(event_id, name, date, url, description, sender_wallet, amount, userid, highest_bidder);\\r\\n\\r\\n    _nft_ids++;\\r\\n\\r\\n    add_Feed(_feed, 'donate_nft');\\r\\n    return _nft_ids;\\r\\n  }\\r\\n\\r\\n  function add_donation(string memory _event_id, uint256 _doantion, string memory _feed) public payable {\\r\\n    add_Feed(_feed, 'donation');\\r\\n\\r\\n    _donations[_donation_ids] = donation_struct(_event_id,_doantion);\\r\\n    _donation_ids++;\\r\\n  }\\r\\n\\r\\n  function join_event(string memory _event_id, uint256 _user_id, string memory _joined_date, string memory _feed) public payable {\\r\\n    add_Feed(_feed, 'event');\\r\\n\\r\\n    _joined_uris[_joined_ids] = joined_struct(_event_id,_user_id,_joined_date);\\r\\n    _joined_ids++;\\r\\n  }\\r\\n  function bid_nft(uint256 nft_id, string memory date, address walletAddress, string memory bidder, uint256 bidder_userid, uint256 amount, string memory _feed) public payable returns (uint256) {\\r\\n    //Bid NFT\\r\\n    _bid_uris[_bid_ids] = bid_uri_struct(nft_id, date, walletAddress, bidder, bidder_userid, amount);\\r\\n    _nft_uris[nft_id].highest_amount = amount;\\r\\n    _nft_uris[nft_id].highest_bidder_userid = bidder_userid;\\r\\n    _nft_uris[nft_id].highest_bidder = bidder;\\r\\n\\r\\n    _bid_ids++;\\r\\n\\r\\n    add_Feed(_feed, 'bid_nft');\\r\\n    return _bid_ids;\\r\\n  }\\r\\n\\r\\n  function get_event_reached(string memory event_id) public view returns (uint256) {\\r\\n    uint256 total = 0;\\r\\n    for (uint256 i = 0; i < _nft_ids; i++) {\\r\\n      nft_uri_struct memory nft = _nft_uris[i];\\r\\n      if (keccak256(bytes(nft.event_id)) == keccak256(bytes(event_id))) {\\r\\n        total += nft.highest_amount;\\r\\n      }\\r\\n    }\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function get_event_nft_count(string memory event_id) public view returns (uint256) {\\r\\n    uint256 total = 0;\\r\\n    for (uint256 i = 0; i < _nft_ids; i++) {\\r\\n      nft_uri_struct memory nft = _nft_uris[i];\\r\\n      if (keccak256(bytes(nft.event_id)) == keccak256(bytes(event_id))) {\\r\\n        total += 1;\\r\\n      }\\r\\n    }\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function distribute_nft_to_highest_bidder(string memory event_id, uint256 event_id_no) public payable {\\r\\n    for (uint256 i = 0; i < _bid_ids; i++) {\\r\\n      bid_uri_struct memory biduri = _bid_uris[i];\\r\\n      nft_uri_struct memory nft = _nft_uris[biduri.nft_id];\\r\\n      if (keccak256(bytes(nft.event_id)) == keccak256(bytes(event_id))) {\\r\\n        if (biduri.bidder_userid == nft.highest_bidder_userid) {\\r\\n          // Highest Bidder of the nft\\r\\n          // Send the money to event wallet\\r\\n          address eventWallet = biduri.walletAddress;\\r\\n          payable(eventWallet).transfer(biduri.bidAmount);\\r\\n\\r\\n          // Send nft to highest bidder\\r\\n\\r\\n          _nft_uris[biduri.nft_id].sender_wallet = biduri.walletAddress;\\r\\n        } else {\\r\\n          // Lowest bidders of the nft\\r\\n          // Send the money to bidders\\r\\n          address nftWallet = biduri.walletAddress;\\r\\n          payable(nftWallet).transfer(biduri.bidAmount);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    _event_uris[event_id_no].status = 'ended';\\r\\n  }\\r\\n\\r\\n  function add_Feed(string memory feed_text, string memory _type) public {\\r\\n    _feeds[_feed_ids] = feed_struct(_feed_ids, block.timestamp, _type, feed_text);\\r\\n    _feed_ids++;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x15d0e246310f4998ae70ec95cb9668fbe64527e66e75acc4302cb144ab89be6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613464806100206000396000f3fe60806040526004361061012a5760003560e01c80637fc543ec116100ab578063b6ea078c1161006f578063b6ea078c1461041e578063bda003351461045b578063cf9a775e14610484578063d8318896146104af578063db9ecaca146104ec578063f0160ee0146105175761012a565b80637fc543ec1461031f5780638ac4110c1461035d57806391134e81146103885780639372c143146103a4578063a6956e33146103e15761012a565b806354a9fb18116100f257806354a9fb181461020757806368fbe27e1461024757806369e114fa14610289578063722f7592146102b45780637dcac861146102f45761012a565b8063215920011461012f578063225bb52a1461015f578063252dc01d146101a4578063445b8bd8146101c057806347484f8d146101dc575b600080fd5b610149600480360381019061014491906127e4565b610556565b60405161015691906128e9565b60405180910390f35b34801561016b57600080fd5b5061018660048036038101906101819190612904565b610705565b60405161019b999897969594939291906129bf565b60405180910390f35b6101be60048036038101906101b99190612a76565b610aa3565b005b6101da60048036038101906101d59190612ad2565b611210565b005b3480156101e857600080fd5b506101f16112b9565b6040516101fe91906128e9565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190612904565b6112bf565b60405161023e9493929190612b5d565b60405180910390f35b34801561025357600080fd5b5061026e60048036038101906102699190612904565b6113ff565b60405161028096959493929190612bb0565b60405180910390f35b34801561029557600080fd5b5061029e61156b565b6040516102ab91906128e9565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190612904565b611571565b6040516102eb9493929190612c1f565b60405180910390f35b34801561030057600080fd5b506103096116d1565b60405161031691906128e9565b60405180910390f35b34801561032b57600080fd5b5061034660048036038101906103419190612904565b6116d7565b604051610354929190612c72565b60405180910390f35b34801561036957600080fd5b50610372611783565b60405161037f91906128e9565b60405180910390f35b6103a2600480360381019061039d9190612ca2565b611789565b005b3480156103b057600080fd5b506103cb60048036038101906103c69190612d5d565b61184f565b6040516103d891906128e9565b60405180910390f35b3480156103ed57600080fd5b5061040860048036038101906104039190612da6565b611ca6565b60405161041591906128e9565b60405180910390f35b34801561042a57600080fd5b5061044560048036038101906104409190612e45565b611e0b565b60405161045291906128e9565b60405180910390f35b34801561046757600080fd5b50610482600480360381019061047d9190612fe8565b611fc5565b005b34801561049057600080fd5b5061049961205c565b6040516104a691906128e9565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d19190612d5d565b612062565b6040516104e391906128e9565b60405180910390f35b3480156104f857600080fd5b506105016124b6565b60405161050e91906128e9565b60405180910390f35b34801561052357600080fd5b5061053e60048036038101906105399190612904565b6124bc565b60405161054d93929190613060565b60405180910390f35b60006040518060c001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815250600a600060045481526020019081526020016000206000820151816000015560208201518160010190816105cf91906132b1565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908161062c91906132b1565b506080820151816004015560a0820151816005015590505082600960008a81526020019081526020016000206006018190555083600960008a81526020019081526020016000206007018190555084600960008a8152602001908152602001600020600801908161069d91906132b1565b50600460008154809291906106b1906133b2565b91905055506106f5826040518060400160405280600781526020017f6269645f6e667400000000000000000000000000000000000000000000000000815250611fc5565b6004549050979650505050505050565b6009602052806000526040600020600091509050806000018054610728906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610754906130d4565b80156107a15780601f10610776576101008083540402835291602001916107a1565b820191906000526020600020905b81548152906001019060200180831161078457829003601f168201915b5050505050908060010180546107b6906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546107e2906130d4565b801561082f5780601f106108045761010080835404028352916020019161082f565b820191906000526020600020905b81548152906001019060200180831161081257829003601f168201915b505050505090806002018054610844906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610870906130d4565b80156108bd5780601f10610892576101008083540402835291602001916108bd565b820191906000526020600020905b8154815290600101906020018083116108a057829003601f168201915b5050505050908060030180546108d2906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546108fe906130d4565b801561094b5780601f106109205761010080835404028352916020019161094b565b820191906000526020600020905b81548152906001019060200180831161092e57829003601f168201915b505050505090806004018054610960906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461098c906130d4565b80156109d95780601f106109ae576101008083540402835291602001916109d9565b820191906000526020600020905b8154815290600101906020018083116109bc57829003601f168201915b5050505050908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806006015490806007015490806008018054610a20906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4c906130d4565b8015610a995780601f10610a6e57610100808354040283529160200191610a99565b820191906000526020600020905b815481529060010190602001808311610a7c57829003601f168201915b5050505050905089565b60005b6004548110156111b2576000600a60008381526020019081526020016000206040518060c001604052908160008201548152602001600182018054610aea906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b16906130d4565b8015610b635780601f10610b3857610100808354040283529160200191610b63565b820191906000526020600020905b815481529060010190602001808311610b4657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610bd2906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfe906130d4565b8015610c4b5780601f10610c2057610100808354040283529160200191610c4b565b820191906000526020600020905b815481529060010190602001808311610c2e57829003601f168201915b505050505081526020016004820154815260200160058201548152505090506000600960008360000151815260200190815260200160002060405180610120016040529081600082018054610c9f906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccb906130d4565b8015610d185780601f10610ced57610100808354040283529160200191610d18565b820191906000526020600020905b815481529060010190602001808311610cfb57829003601f168201915b50505050508152602001600182018054610d31906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5d906130d4565b8015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b50505050508152602001600282018054610dc3906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610def906130d4565b8015610e3c5780601f10610e1157610100808354040283529160200191610e3c565b820191906000526020600020905b815481529060010190602001808311610e1f57829003601f168201915b50505050508152602001600382018054610e55906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e81906130d4565b8015610ece5780601f10610ea357610100808354040283529160200191610ece565b820191906000526020600020905b815481529060010190602001808311610eb157829003601f168201915b50505050508152602001600482018054610ee7906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610f13906130d4565b8015610f605780601f10610f3557610100808354040283529160200191610f60565b820191906000526020600020905b815481529060010190602001808311610f4357829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815260200160078201548152602001600882018054610fe3906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461100f906130d4565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b505050505081525050905084805190602001208160000151805190602001200361119d578060e00151826080015103611146576000826040015190508073ffffffffffffffffffffffffffffffffffffffff166108fc8460a001519081150290604051600060405180830381858888f193505050501580156110e2573d6000803e3d6000fd5b508260400151600960008560000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061119c565b6000826040015190508073ffffffffffffffffffffffffffffffffffffffff166108fc8460a001519081150290604051600060405180830381858888f19350505050158015611199573d6000803e3d6000fd5b50505b5b505080806111aa906133b2565b915050610aa6565b506040518060400160405280600581526020017f656e64656400000000000000000000000000000000000000000000000000000081525060066000838152602001908152602001600020600301908161120b91906132b1565b505050565b61124f816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250611fc5565b604051806040016040528084815260200183815250600860006002548152602001908152602001600020600082015181600001908161128e91906132b1565b5060208201518160010155905050600260008154809291906112af906133b2565b9190505550505050565b60015481565b600b6020528060005260406000206000915090508060000154908060010154908060020180546112ee906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461131a906130d4565b80156113675780601f1061133c57610100808354040283529160200191611367565b820191906000526020600020905b81548152906001019060200180831161134a57829003601f168201915b50505050509080600301805461137c906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546113a8906130d4565b80156113f55780601f106113ca576101008083540402835291602001916113f5565b820191906000526020600020905b8154815290600101906020018083116113d857829003601f168201915b5050505050905084565b600a602052806000526040600020600091509050806000015490806001018054611428906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611454906130d4565b80156114a15780601f10611476576101008083540402835291602001916114a1565b820191906000526020600020905b81548152906001019060200180831161148457829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546114dc906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611508906130d4565b80156115555780601f1061152a57610100808354040283529160200191611555565b820191906000526020600020905b81548152906001019060200180831161153857829003601f168201915b5050505050908060040154908060050154905086565b60005481565b600660205280600052604060002060009150905080600001549080600101805461159a906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546115c6906130d4565b80156116135780601f106115e857610100808354040283529160200191611613565b820191906000526020600020905b8154815290600101906020018083116115f657829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600301805461164e906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461167a906130d4565b80156116c75780601f1061169c576101008083540402835291602001916116c7565b820191906000526020600020905b8154815290600101906020018083116116aa57829003601f168201915b5050505050905084565b60045481565b60086020528060005260406000206000915090508060000180546116fa906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611726906130d4565b80156117735780601f1061174857610100808354040283529160200191611773565b820191906000526020600020905b81548152906001019060200180831161175657829003601f168201915b5050505050908060010154905082565b60055481565b6117c8816040518060400160405280600581526020017f6576656e74000000000000000000000000000000000000000000000000000000815250611fc5565b604051806060016040528085815260200184815260200183815250600760006001548152602001908152602001600020600082015181600001908161180d91906132b1565b5060208201518160010155604082015181600201908161182d91906132b1565b5090505060016000815480929190611844906133b2565b919050555050505050565b6000806000905060005b600354811015611c9c5760006009600083815260200190815260200160002060405180610120016040529081600082018054611894906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546118c0906130d4565b801561190d5780601f106118e25761010080835404028352916020019161190d565b820191906000526020600020905b8154815290600101906020018083116118f057829003601f168201915b50505050508152602001600182018054611926906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611952906130d4565b801561199f5780601f106119745761010080835404028352916020019161199f565b820191906000526020600020905b81548152906001019060200180831161198257829003601f168201915b505050505081526020016002820180546119b8906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546119e4906130d4565b8015611a315780601f10611a0657610100808354040283529160200191611a31565b820191906000526020600020905b815481529060010190602001808311611a1457829003601f168201915b50505050508152602001600382018054611a4a906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611a76906130d4565b8015611ac35780601f10611a9857610100808354040283529160200191611ac3565b820191906000526020600020905b815481529060010190602001808311611aa657829003601f168201915b50505050508152602001600482018054611adc906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b08906130d4565b8015611b555780601f10611b2a57610100808354040283529160200191611b55565b820191906000526020600020905b815481529060010190602001808311611b3857829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815260200160078201548152602001600882018054611bd8906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611c04906130d4565b8015611c515780601f10611c2657610100808354040283529160200191611c51565b820191906000526020600020905b815481529060010190602001808311611c3457829003601f168201915b5050505050815250509050848051906020012081600001518051906020012003611c88578060c0015183611c8591906133fa565b92505b508080611c94906133b2565b915050611859565b5080915050919050565b600060405180608001604052808481526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508152506006600080548152602001908152602001600020600082015181600001556020820151816001019081611d4791906132b1565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081611da491906132b1565b50905050600080815480929190611dba906133b2565b9190505550611dfe826040518060400160405280600581526020017f6576656e74000000000000000000000000000000000000000000000000000000815250611fc5565b6000549050949350505050565b60006040518061012001604052808c81526020018b81526020018781526020018a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506009600060035481526020019081526020016000206000820151816000019081611e8d91906132b1565b506020820151816001019081611ea391906132b1565b506040820151816002019081611eb991906132b1565b506060820151816003019081611ecf91906132b1565b506080820151816004019081611ee591906132b1565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070155610100820151816008019081611f5791906132b1565b5090505060036000815480929190611f6e906133b2565b9190505550611fb2826040518060400160405280600a81526020017f646f6e6174655f6e667400000000000000000000000000000000000000000000815250611fc5565b60035490509a9950505050505050505050565b6040518060800160405280600554815260200142815260200182815260200183815250600b600060055481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908161202691906132b1565b50606082015181600301908161203c91906132b1565b5090505060056000815480929190612053906133b2565b91905055505050565b60025481565b6000806000905060005b6003548110156124ac57600060096000838152602001908152602001600020604051806101200160405290816000820180546120a7906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546120d3906130d4565b80156121205780601f106120f557610100808354040283529160200191612120565b820191906000526020600020905b81548152906001019060200180831161210357829003601f168201915b50505050508152602001600182018054612139906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054612165906130d4565b80156121b25780601f10612187576101008083540402835291602001916121b2565b820191906000526020600020905b81548152906001019060200180831161219557829003601f168201915b505050505081526020016002820180546121cb906130d4565b80601f01602080910402602001604051908101604052809291908181526020018280546121f7906130d4565b80156122445780601f1061221957610100808354040283529160200191612244565b820191906000526020600020905b81548152906001019060200180831161222757829003601f168201915b5050505050815260200160038201805461225d906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054612289906130d4565b80156122d65780601f106122ab576101008083540402835291602001916122d6565b820191906000526020600020905b8154815290600101906020018083116122b957829003601f168201915b505050505081526020016004820180546122ef906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461231b906130d4565b80156123685780601f1061233d57610100808354040283529160200191612368565b820191906000526020600020905b81548152906001019060200180831161234b57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481526020016008820180546123eb906130d4565b80601f0160208091040260200160405190810160405280929190818152602001828054612417906130d4565b80156124645780601f1061243957610100808354040283529160200191612464565b820191906000526020600020905b81548152906001019060200180831161244757829003601f168201915b50505050508152505090508480519060200120816000015180519060200120036124985760018361249591906133fa565b92505b5080806124a4906133b2565b91505061206c565b5080915050919050565b60035481565b60076020528060005260406000206000915090508060000180546124df906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461250b906130d4565b80156125585780601f1061252d57610100808354040283529160200191612558565b820191906000526020600020905b81548152906001019060200180831161253b57829003601f168201915b505050505090806001015490806002018054612573906130d4565b80601f016020809104026020016040519081016040528092919081815260200182805461259f906130d4565b80156125ec5780601f106125c1576101008083540402835291602001916125ec565b820191906000526020600020905b8154815290600101906020018083116125cf57829003601f168201915b5050505050905083565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61261d8161260a565b811461262857600080fd5b50565b60008135905061263a81612614565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126938261264a565b810181811067ffffffffffffffff821117156126b2576126b161265b565b5b80604052505050565b60006126c56125f6565b90506126d1828261268a565b919050565b600067ffffffffffffffff8211156126f1576126f061265b565b5b6126fa8261264a565b9050602081019050919050565b82818337600083830152505050565b6000612729612724846126d6565b6126bb565b90508281526020810184848401111561274557612744612645565b5b612750848285612707565b509392505050565b600082601f83011261276d5761276c612640565b5b813561277d848260208601612716565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127b182612786565b9050919050565b6127c1816127a6565b81146127cc57600080fd5b50565b6000813590506127de816127b8565b92915050565b600080600080600080600060e0888a03121561280357612802612600565b5b60006128118a828b0161262b565b975050602088013567ffffffffffffffff81111561283257612831612605565b5b61283e8a828b01612758565b965050604061284f8a828b016127cf565b955050606088013567ffffffffffffffff8111156128705761286f612605565b5b61287c8a828b01612758565b945050608061288d8a828b0161262b565b93505060a061289e8a828b0161262b565b92505060c088013567ffffffffffffffff8111156128bf576128be612605565b5b6128cb8a828b01612758565b91505092959891949750929550565b6128e38161260a565b82525050565b60006020820190506128fe60008301846128da565b92915050565b60006020828403121561291a57612919612600565b5b60006129288482850161262b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561296b578082015181840152602081019050612950565b60008484015250505050565b600061298282612931565b61298c818561293c565b935061299c81856020860161294d565b6129a58161264a565b840191505092915050565b6129b9816127a6565b82525050565b60006101208201905081810360008301526129da818c612977565b905081810360208301526129ee818b612977565b90508181036040830152612a02818a612977565b90508181036060830152612a168189612977565b90508181036080830152612a2a8188612977565b9050612a3960a08301876129b0565b612a4660c08301866128da565b612a5360e08301856128da565b818103610100830152612a668184612977565b90509a9950505050505050505050565b60008060408385031215612a8d57612a8c612600565b5b600083013567ffffffffffffffff811115612aab57612aaa612605565b5b612ab785828601612758565b9250506020612ac88582860161262b565b9150509250929050565b600080600060608486031215612aeb57612aea612600565b5b600084013567ffffffffffffffff811115612b0957612b08612605565b5b612b1586828701612758565b9350506020612b268682870161262b565b925050604084013567ffffffffffffffff811115612b4757612b46612605565b5b612b5386828701612758565b9150509250925092565b6000608082019050612b7260008301876128da565b612b7f60208301866128da565b8181036040830152612b918185612977565b90508181036060830152612ba58184612977565b905095945050505050565b600060c082019050612bc560008301896128da565b8181036020830152612bd78188612977565b9050612be660408301876129b0565b8181036060830152612bf88186612977565b9050612c0760808301856128da565b612c1460a08301846128da565b979650505050505050565b6000608082019050612c3460008301876128da565b8181036020830152612c468186612977565b9050612c5560408301856129b0565b8181036060830152612c678184612977565b905095945050505050565b60006040820190508181036000830152612c8c8185612977565b9050612c9b60208301846128da565b9392505050565b60008060008060808587031215612cbc57612cbb612600565b5b600085013567ffffffffffffffff811115612cda57612cd9612605565b5b612ce687828801612758565b9450506020612cf78782880161262b565b935050604085013567ffffffffffffffff811115612d1857612d17612605565b5b612d2487828801612758565b925050606085013567ffffffffffffffff811115612d4557612d44612605565b5b612d5187828801612758565b91505092959194509250565b600060208284031215612d7357612d72612600565b5b600082013567ffffffffffffffff811115612d9157612d90612605565b5b612d9d84828501612758565b91505092915050565b60008060008060808587031215612dc057612dbf612600565b5b600085013567ffffffffffffffff811115612dde57612ddd612605565b5b612dea87828801612758565b9450506020612dfb878288016127cf565b9350506040612e0c8782880161262b565b925050606085013567ffffffffffffffff811115612e2d57612e2c612605565b5b612e3987828801612758565b91505092959194509250565b6000806000806000806000806000806101408b8d031215612e6957612e68612600565b5b60008b013567ffffffffffffffff811115612e8757612e86612605565b5b612e938d828e01612758565b9a505060208b013567ffffffffffffffff811115612eb457612eb3612605565b5b612ec08d828e01612758565b99505060408b013567ffffffffffffffff811115612ee157612ee0612605565b5b612eed8d828e01612758565b98505060608b013567ffffffffffffffff811115612f0e57612f0d612605565b5b612f1a8d828e01612758565b9750506080612f2b8d828e016127cf565b96505060a08b013567ffffffffffffffff811115612f4c57612f4b612605565b5b612f588d828e01612758565b95505060c0612f698d828e0161262b565b94505060e0612f7a8d828e0161262b565b9350506101008b013567ffffffffffffffff811115612f9c57612f9b612605565b5b612fa88d828e01612758565b9250506101208b013567ffffffffffffffff811115612fca57612fc9612605565b5b612fd68d828e01612758565b9150509295989b9194979a5092959850565b60008060408385031215612fff57612ffe612600565b5b600083013567ffffffffffffffff81111561301d5761301c612605565b5b61302985828601612758565b925050602083013567ffffffffffffffff81111561304a57613049612605565b5b61305685828601612758565b9150509250929050565b6000606082019050818103600083015261307a8186612977565b905061308960208301856128da565b818103604083015261309b8184612977565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806130ec57607f821691505b6020821081036130ff576130fe6130a5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026131677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261312a565b613171868361312a565b95508019841693508086168417925050509392505050565b6000819050919050565b60006131ae6131a96131a48461260a565b613189565b61260a565b9050919050565b6000819050919050565b6131c883613193565b6131dc6131d4826131b5565b848454613137565b825550505050565b600090565b6131f16131e4565b6131fc8184846131bf565b505050565b5b81811015613220576132156000826131e9565b600181019050613202565b5050565b601f8211156132655761323681613105565b61323f8461311a565b8101602085101561324e578190505b61326261325a8561311a565b830182613201565b50505b505050565b600082821c905092915050565b60006132886000198460080261326a565b1980831691505092915050565b60006132a18383613277565b9150826002028217905092915050565b6132ba82612931565b67ffffffffffffffff8111156132d3576132d261265b565b5b6132dd82546130d4565b6132e8828285613224565b600060209050601f83116001811461331b5760008415613309578287015190505b6133138582613295565b86555061337b565b601f19841661332986613105565b60005b828110156133515784890151825560018201915060208501945060208101905061332c565b8683101561336e578489015161336a601f891682613277565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133bd8261260a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036133ef576133ee613383565b5b600182019050919050565b60006134058261260a565b91506134108361260a565b925082820190508082111561342857613427613383565b5b9291505056fea264697066735822122021513d77739b99d69f64e1ef753c323608725ba80839cd902523edd5a6adbdce64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1819,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_event_ids",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1821,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_joined_ids",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1823,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_donation_ids",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1825,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_nft_ids",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1827,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_bid_ids",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1829,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_feed_ids",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1834,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_event_uris",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(event_uri_struct)1764_storage)"
      },
      {
        "astId": 1839,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_joined_uris",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(joined_struct)1808_storage)"
      },
      {
        "astId": 1844,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_donations",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(donation_struct)1801_storage)"
      },
      {
        "astId": 1849,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_nft_uris",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(nft_uri_struct)1783_storage)"
      },
      {
        "astId": 1854,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_bid_uris",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(bid_uri_struct)1796_storage)"
      },
      {
        "astId": 1859,
        "contract": "contracts/Fundefi.sol:Fundefi",
        "label": "_feeds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(feed_struct)1817_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(bid_uri_struct)1796_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundefi.bid_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(bid_uri_struct)1796_storage"
      },
      "t_mapping(t_uint256,t_struct(donation_struct)1801_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundefi.donation_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(donation_struct)1801_storage"
      },
      "t_mapping(t_uint256,t_struct(event_uri_struct)1764_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundefi.event_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(event_uri_struct)1764_storage"
      },
      "t_mapping(t_uint256,t_struct(feed_struct)1817_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundefi.feed_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(feed_struct)1817_storage"
      },
      "t_mapping(t_uint256,t_struct(joined_struct)1808_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundefi.joined_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(joined_struct)1808_storage"
      },
      "t_mapping(t_uint256,t_struct(nft_uri_struct)1783_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundefi.nft_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(nft_uri_struct)1783_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(bid_uri_struct)1796_storage": {
        "encoding": "inplace",
        "label": "struct Fundefi.bid_uri_struct",
        "members": [
          {
            "astId": 1785,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "nft_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1787,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1789,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "walletAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1791,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "bidder",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1793,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "bidder_userid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1795,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "bidAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(donation_struct)1801_storage": {
        "encoding": "inplace",
        "label": "struct Fundefi.donation_struct",
        "members": [
          {
            "astId": 1798,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "event_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1800,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(event_uri_struct)1764_storage": {
        "encoding": "inplace",
        "label": "struct Fundefi.event_uri_struct",
        "members": [
          {
            "astId": 1757,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1759,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "event_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1761,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "event_wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1763,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(feed_struct)1817_storage": {
        "encoding": "inplace",
        "label": "struct Fundefi.feed_struct",
        "members": [
          {
            "astId": 1810,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "feed_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1812,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1814,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "Type",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1816,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(joined_struct)1808_storage": {
        "encoding": "inplace",
        "label": "struct Fundefi.joined_struct",
        "members": [
          {
            "astId": 1803,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "event_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1805,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1807,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "joined_date",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(nft_uri_struct)1783_storage": {
        "encoding": "inplace",
        "label": "struct Fundefi.nft_uri_struct",
        "members": [
          {
            "astId": 1766,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "event_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1768,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1770,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "date",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1772,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "url",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1774,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1776,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "sender_wallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1778,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "highest_amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1780,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "highest_bidder_userid",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1782,
            "contract": "contracts/Fundefi.sol:Fundefi",
            "label": "highest_bidder",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}